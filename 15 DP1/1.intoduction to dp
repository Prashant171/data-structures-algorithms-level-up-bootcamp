Dynamic programming

DP is all about "Remembering" what you have solved in the past


Ex.
Fibonacci Series
0, 1, 1, 2, 3, 5, 8, 13 ........

Recurrence
f(n) = f(n-1) + f(n-2)

//Simple Recursive function for nth fibonocci
(Fibonacci Recursion tree)

int fib(int n){

    //base case
    if(n==0 or n==1){
        return n;
    }

    //recursive case
    return fib(n-1) + fib(n-2);
}

                n
            n-1          n-2
        n-2     n-2     n-3 n-4  

n levels
Complexity: 2^n
1 + 2 + 4 + 8 + .... 2^n-1 = O(2^n)



OPTIMIZATION

(Fibonacci + Memoisation )
Storing the already calculated values
Complexity O(n)

2ways
1. Top down : Recursion + memoisation
2. Bottom up : iterative approach




Top down DP

In Top down DP, we start building the big solution right way 
by explaining how you build it from smaller solutions

//Top down DP Example

int fib(int n, int dp[]){

    //base case
    if(n==0 or n==1){
        return n;
    }

    //check if the state is alredy computed
    if(dp[n] !=0) {
        return dp[n];
    }

    //Otherwise compute the state and store it
    return dp[n] = fib(n-1, dp) + fib(n-2, dp);
}



Bottom Up DP

In bottom up DP, we start with small solutions and 
then use the small solutions to build larger solutions

//Bottom UP DP exmaple

int fib(int n) {
    int dp[n+1] = {0};

    //base case becomes the assignment
    dp[0] = 0;
    dp[1] = 1;

    //bottom up dp
    for(int i=2; i<=n ;i++){
        dp[i] = dp[i-1] + dp[i-2];
    }
    return dp[n];
}

Space and time complexity = O(N)

